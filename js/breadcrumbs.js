// breadcrumbs.js - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏

class BreadcrumbsManager {
    constructor() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
        this.currentLang = this.detectLanguage();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        this.separatorSettings = {
            text: ' / ',
            className: 'breadcrumb-separator'
        };
        
        // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        this.texts = {
            uk: {
                home: '–ì–æ–ª–æ–≤–Ω–∞',
                b2bPlatform: '–ú–∞–π–¥–∞–Ω—á–∏–∫ B2B',
                createRequest: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó/–ø–æ—Ç—Ä–µ–±–∏',
                cabinet: '–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç',
                profile: '–ü—Ä–æ—Ñ—ñ–ª—å',
                settings: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                editProfile: '–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é',
                myRequests: '–ú–æ—ó –∑–∞–ø–∏—Ç–∏',
                category: '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è',
                offer: '–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è',
                contacts: '–ö–æ–Ω—Ç–∞–∫—Ç–∏',
                about: '–ü—Ä–æ –Ω–∞—Å',
                howItWorks: '–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î',
                privacyPolicy: '–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ'
            },
            en: {
                home: 'Home',
                b2bPlatform: 'B2B Platform',
                createRequest: 'Post Request/Offer',
                cabinet: 'Personal Cabinet',
                profile: 'Profile',
                settings: 'Settings',
                editProfile: 'Edit Profile',
                myRequests: 'My Requests',
                category: 'Category',
                offer: 'Offer',
                contacts: 'Contacts',
                about: 'About',
                howItWorks: 'How it works',
                privacyPolicy: 'Privacy Policy'
            }
        };

        // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü –∫ —Ç–µ–∫—Å—Ç–∞–º
        this.pageMapping = {
            'b2b.html': 'b2bPlatform',
            'add-request.html': 'createRequest',
            'cabinet.html': 'cabinet',
            'edit-profile.html': 'editProfile',
            'contacts.html': 'contacts',
            'about.html': 'about',
            'how-it-works.html': 'howItWorks',
            'privacy-policy.html': 'privacyPolicy',
            'b2b-single.html': 'category',
            'branch.html': 'category',
            'offer.html': 'offer'
        };

        this.init();
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    detectLanguage() {
        const path = window.location.pathname;
        const langMatch = path.match(/\/(en|uk)\//);
        const detectedLang = langMatch ? langMatch[1] : 'uk';
        
        console.log(`üçû Breadcrumbs: –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ ${detectedLang} –∏–∑ –ø—É—Ç–∏: ${path}`);
        return detectedLang;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    getText(key) {
        return this.texts[this.currentLang]?.[key] || this.texts.uk[key] || key;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
    getLocalizedPath(path) {
        if (path.startsWith('./')) {
            const basePath = path.substring(2);
            if (this.currentLang === 'en') {
                return `./${basePath}`;
            } else {
                return `./${basePath}`;
            }
        }
        return path;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    getNavigationUrl(page) {
        if (this.currentLang === 'en') {
            // –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏ –æ—Å—Ç–∞–µ–º—Å—è –≤ –ø–∞–ø–∫–µ /en/
            return `./${page}`;
        } else {
            // –î–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å
            return `./${page}`;
        }
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BreadcrumbsManager...');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                this.setupBreadcrumbs();
            });
        } else {
            this.setupBreadcrumbs();
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
    setupBreadcrumbs() {
        const breadcrumbsContainer = this.findBreadcrumbsContainer();
        if (!breadcrumbsContainer) {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const currentPage = this.getCurrentPage();
        console.log(`üìç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${currentPage}`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const breadcrumbs = this.generateBreadcrumbs(currentPage);
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
        this.renderBreadcrumbs(breadcrumbsContainer, breadcrumbs);
        
        console.log('‚úÖ –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
    findBreadcrumbsContainer() {
        return document.querySelector('.bread-crumbs-b2b') || 
               document.querySelector('.breadcrumbs') ||
               document.querySelector('[data-breadcrumbs]') ||
               document.getElementById('breadcrumbs');
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    getCurrentPage() {
        const path = window.location.pathname;
        const fileName = path.split('/').pop() || 'index.html';
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`üîç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${path}`);
        console.log(`üìÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${fileName}`);
        
        return fileName;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    generateBreadcrumbs(currentPage) {
        const breadcrumbs = [];

        // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å "–ì–ª–∞–≤–Ω–∞—è"
        breadcrumbs.push({
            text: this.getText('home'),
            url: this.getNavigationUrl('index.html'),
            isActive: false
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        switch (currentPage) {
            case 'b2b.html':
                breadcrumbs.push({
                    text: this.getText('b2bPlatform'),
                    url: null,
                    isActive: true
                });
                break;

            case 'add-request.html':
                breadcrumbs.push({
                    text: this.getText('b2bPlatform'),
                    url: this.getNavigationUrl('b2b.html'),
                    isActive: false
                });
                breadcrumbs.push({
                    text: this.getText('createRequest'),
                    url: null,
                    isActive: true
                });
                break;

            case 'cabinet.html':
                breadcrumbs.push({
                    text: this.getText('cabinet'),
                    url: null,
                    isActive: true
                });
                break;

            case 'edit-profile.html':
                breadcrumbs.push({
                    text: this.getText('cabinet'),
                    url: this.getNavigationUrl('cabinet.html'),
                    isActive: false
                });
                breadcrumbs.push({
                    text: this.getText('editProfile'),
                    url: null,
                    isActive: true
                });
                break;

            case 'b2b-single.html':
                breadcrumbs.push({
                    text: this.getText('b2bPlatform'),
                    url: this.getNavigationUrl('b2b.html'),
                    isActive: false
                });
                breadcrumbs.push({
                    text: this.getText('category'),
                    url: null,
                    isActive: true
                });
                break;

            case 'offer.html':
                breadcrumbs.push({
                    text: this.getText('b2bPlatform'),
                    url: this.getNavigationUrl('b2b.html'),
                    isActive: false
                });
                breadcrumbs.push({
                    text: this.getText('category'),
                    url: this.getNavigationUrl('b2b-single.html'),
                    isActive: false
                });
                breadcrumbs.push({
                    text: this.getText('offer'),
                    url: null,
                    isActive: true
                });
                break;

            case 'branch.html':
                breadcrumbs.push({
                    text: this.getText('b2bPlatform'),
                    url: this.getNavigationUrl('b2b.html'),
                    isActive: false
                });
                breadcrumbs.push({
                    text: this.getText('category'),
                    url: null,
                    isActive: true
                });
                break;

            case 'contacts.html':
                breadcrumbs.push({
                    text: this.getText('contacts'),
                    url: null,
                    isActive: true
                });
                break;

            case 'about.html':
                breadcrumbs.push({
                    text: this.getText('about'),
                    url: null,
                    isActive: true
                });
                break;

            case 'how-it-works.html':
                breadcrumbs.push({
                    text: this.getText('howItWorks'),
                    url: null,
                    isActive: true
                });
                break;

            case 'privacy-policy.html':
                breadcrumbs.push({
                    text: this.getText('privacyPolicy'),
                    url: null,
                    isActive: true
                });
                break;

            case 'index.html':
            case '':
                // –î–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ "–ì–ª–∞–≤–Ω–∞—è" –∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
                breadcrumbs[0].isActive = true;
                breadcrumbs[0].url = null;
                break;

            default:
                // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –º–∞–ø–ø–∏–Ω–≥—É
                const pageKey = this.pageMapping[currentPage];
                if (pageKey) {
                    breadcrumbs.push({
                        text: this.getText(pageKey),
                        url: null,
                        isActive: true
                    });
                } else {
                    // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –Ω–æ –≤ –ø—É—Ç–∏ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏
                    if (currentPage.includes('b2b')) {
                        breadcrumbs.push({
                            text: this.getText('b2bPlatform'),
                            url: null,
                            isActive: true
                        });
                    }
                }
                break;
        }

        return breadcrumbs;
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    renderBreadcrumbs(container, breadcrumbs, customSeparator = null) {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';

        const separator = customSeparator || this.separatorSettings;

        breadcrumbs.forEach((crumb, index) => {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∫—Ä–æ—à–∫–æ–π –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
            if (index > 0) {
                const separatorElement = document.createElement('span');
                separatorElement.className = separator.className;
                separatorElement.textContent = separator.text;
                container.appendChild(separatorElement);
            }

            const crumbElement = document.createElement('span');
            
            if (crumb.isActive) {
                crumbElement.className = 'current';
                crumbElement.textContent = crumb.text;
            } else if (crumb.url) {
                crumbElement.className = index === 0 ? 'home' : 'b2b-link';
                const link = document.createElement('a');
                link.href = crumb.url;
                link.textContent = crumb.text;
                link.addEventListener('click', (e) => {
                    this.handleBreadcrumbClick(e, crumb.url);
                });
                crumbElement.appendChild(link);
            } else {
                crumbElement.className = index === 0 ? 'home' : 'b2b-link';
                crumbElement.textContent = crumb.text;
            }

            container.appendChild(crumbElement);
        });

        console.log(`üçû –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${breadcrumbs.length} —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ "${separator.text}"`);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    setSeparator(text, className = 'breadcrumb-separator') {
        this.separatorSettings = { text, className };
        this.refresh(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ö–ª–µ–±–Ω–æ–π –∫—Ä–æ—à–∫–µ
    handleBreadcrumbClick(event, url) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        console.log(`üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ö–ª–µ–±–Ω–æ–π –∫—Ä–æ—à–∫–µ: ${url}`);
        
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ —Å–¥–µ–ª–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        // event.preventDefault();
        // window.location.href = url;
    }

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
    buildBreadcrumbs(customBreadcrumbs) {
        const container = this.findBreadcrumbsContainer();
        if (!container) {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const breadcrumbs = [];
        
        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º "–ì–ª–∞–≤–Ω–∞—è" –≤ –Ω–∞—á–∞–ª–æ
        breadcrumbs.push({
            text: this.getText('home'),
            url: this.getNavigationUrl('index.html'),
            isActive: false
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫—Ä–æ—à–∫–∏
        customBreadcrumbs.forEach((crumb, index) => {
            breadcrumbs.push({
                text: crumb.title,
                url: crumb.href,
                isActive: index === customBreadcrumbs.length - 1 // –ø–æ—Å–ª–µ–¥–Ω—è—è –∫—Ä–æ—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            });
        });

        this.renderBreadcrumbs(container, breadcrumbs);
        console.log('üçû –ü–æ—Å—Ç—Ä–æ–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞)
    refresh() {
        this.currentLang = this.detectLanguage();
        this.setupBreadcrumbs();
        console.log('üîÑ –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    getDebugInfo() {
        const container = this.findBreadcrumbsContainer();
        
        return {
            language: this.currentLang,
            currentPage: this.getCurrentPage(),
            containerExists: !!container,
            containerContent: container ? container.innerHTML : null,
            availableTexts: this.texts[this.currentLang]
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.breadcrumbsManager = new BreadcrumbsManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.BreadcrumbsManager = BreadcrumbsManager;